// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Survey {
  id                      String   @id @default(cuid())
  shortId                 String   @unique @map("short_id")        // Short alphanumeric ID for blockchain (8 chars)
  title                   String
  description             String?
  question                String
  blindSignaturePublicKey String   @map("blind_signature_public_key") // RSA public key for blind signatures
  encryptionPublicKey     String   @map("encryption_public_key")     // RSA public key for encryption
  merkleRoot              String?  @map("merkle_root")              // Merkle root of all commitments
  isPublished             Boolean  @default(false) @map("is_published")
  publishedAt             DateTime? @map("published_at")            // When the survey was published
  totalResponses          Int      @default(0) @map("total_responses")
  blockchainAddress       String?  // Address of the survey on the blockchain
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  tokens                  Token[]
  responses               SurveyResponse[]
  privateKey              SurveyPrivateKey?

  @@map("surveys")
}

model Token {
  id           String   @id @default(cuid())
  surveyId     String   @map("survey_id")
  token        String   @unique                    // The actual token value
  studentEmail String   @map("student_email")         // Student's email for token distribution
  used         Boolean  @default(false)               // Whether the token has been used
  isCompleted  Boolean  @default(false)               // Whether the survey was completed
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  survey       Survey   @relation(fields: [surveyId], references: [id])

  @@map("tokens")
}

model SurveyResponse {
  id              String   @id @default(cuid())
  surveyId        String   @map("survey_id")
  encryptedAnswer String   @map("encrypted_answer")    // RSA encrypted answer from blockchain
  decryptedAnswer String   @map("decrypted_answer")    // Decrypted answer for school analysis
  commitmentHash  String   @unique @map("commitment_hash") // Hash commitment for verification
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  survey          Survey   @relation(fields: [surveyId], references: [id])

  @@map("survey_responses")
}

model SurveyPrivateKey {
  id                      String   @id @default(cuid())
  surveyId                String   @unique @map("survey_id")
  blindSignaturePrivateKey String   @map("blind_signature_private_key") // RSA private key for blind signatures
  encryptionPrivateKey     String   @map("encryption_private_key")     // RSA private key for encryption
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  survey                  Survey   @relation(fields: [surveyId], references: [id])

  @@map("survey_private_keys")
}
